Data la seguente classe:
	
		public class Persona {
		
		//Applico l'incapsulamento in quanto dichiaro 
		//la variabile nome private ed implemento metodi get e set pubblici per poter leggere e scrivere tale variabile.
		
		private String nome;
		
		public void setNome(String nome) {
		this.nome = nome;
		}
		
		public String getNome() {
		return nome;
		}
		}
		
Commentare la seguente classe Impiegato evidenziando dove sono utilizzati i paradigmi object oriented: 
incapsulamento, ereditarietà e riuso.
		
		//Aplico l'ereditarietà perchè estendo la classe persona specializzando in impiegato.
		public class Impiegato extends Persona {
		
		//Incapsulamento per la matricola.
		private int matricola;
		
		//Riuso perche prende il metodo setNome della superclasse.
		public void setDati(String nome, int matricola) {
		setNome(nome);
		setMatricola(matricola);
		}
		
		public void setMatricola(int matricola) {
		this.matricola = matricola;
		}
		public int getMatricola() {
		return matricola;
		}
		
		//Usa tutto perchè richiama getNome della superclasse e matricola che è incapsulata nella sottoclasse.
		public String dammiDettagli() {
		return getNome() + ", matricola: " + getMatricola();
		}
		}